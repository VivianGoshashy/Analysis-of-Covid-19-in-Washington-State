# Importing Libraries
import os
import sys
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import interpolate
from scipy.optimize import minimize
from scipy import integrate
from scipy.integrate import odeint
import plotly.graph_objects as go
import plotly.io as pio
import requests
import lmfit
from lmfit import minimize, Parameters, Parameter, report_fit
pio.renderers.default = "notebook"
%matplotlib inline
plt.style.use('ggplot')

# Importing Data
WA_Cov1 = pd.read_csv('WA-COVID-19.csv', usecols=['Number of days','Seasons','Total Population', 'Number of Infected People','Number of deaths', 'Number of Hospitalized'])
WA_Cov1.set_index('Number of days')
WA_Cov1.dtypes 

WA_Cov1.head()

# STATISTICAL ANALYSIS OF THE DATASET

# summary of each column in the dataframe
WA_Cov1['Number of Infected People'].describe()

# Statistical summary
WA_Cov1['Number of deaths'].describe()

WA_Cov1['Number of Hospitalized'].describe()

WA_Cov1['Total Population'].describe()

# DATA VISUALIZATION

# A graph showing Infected people in WA State
plt.plot(WA_Cov1['Number of days'],WA_Cov1['Number of Infected People'],color='yellow')
plt.title('Total number of Infected People with COVID-19 in WA State',fontsize=12)
plt.xlabel('Time')
plt.ylabel('Infected People')
plt.show()
plt.savefig('Infected.png')

sns.barplot(x="Seasons", y="Number of Infected People", data=WA_Cov1)
plt.savefig("IS.png")

# A graph showing Dead people in WA State
plt.plot(WA_Cov1['Number of days'],WA_Cov1['Number of deaths'],color='red')
plt.title('Total number of people who died from COVID-19 in WA State',fontsize=10)
plt.xlabel('Time',fontsize=10)
plt.ylabel('Removed People',fontsize=10)
plt.show()
plt.savefig("D.png")

sns.barplot(x="Seasons", y="Number of deaths", data=WA_Cov1)
plt.savefig("DS.png")

# A graph showing Hospitalized people in WA State
plt.plot(WA_Cov1['Number of days'],WA_Cov1['Number of Hospitalized'],color='blue')
plt.title('Total number of people who are hospitalized from COVID-19 in WA State',fontsize=10)
plt.xlabel('Time',fontsize=10)
plt.ylabel('Hospitallized People',fontsize=10)
plt.show()

sns.barplot(x="Seasons", y="Number of Hospitalized", data=WA_Cov1)
plt.savefig("HS.png")

# A graph showing Susceptible people in WA State
plt.plot(WA_Cov1['Number of days'],WA_Cov1['Total Population'],color='green')
plt.title('Total number of susceptible people in WA State',fontsize=9)
plt.xlabel('Time',fontsize=10)
plt.ylabel('Susceptible People',fontsize=10)
plt.ylim(0,8000000)
plt.show()
plt.savefig("S.png")

# Plot a simple line chart
plt.plot(WA_Cov1['Number of days'], WA_Cov1['Number of Infected People'], color='yellow', label='Infected People')

# Plot another line on the same chart/graph
plt.plot(WA_Cov1['Number of days'], WA_Cov1['Number of deaths'], color='red', label='Removed People')

# Plot another line on the same chart/graph
plt.plot(WA_Cov1['Number of days'], WA_Cov1['Total Population'], color='green', label='Susceptible individuals')
plt.ylim(0,9000)
plt.title('SIR Model of COVID-19 in WA State',fontsize=9)
plt.xlabel('Time',fontsize=10)
plt.ylabel('Population',fontsize=10)
plt.legend()
plt.show()
plt.savefig("All.png")

# DATA ANALYSIS
# SIR MODEL DIFFERENTIAL EQUATIONS AND ESTIMATION OF PARAMETERS

def ode_model(z, t, beta, alpha):
    S, I, R = z
    N = S + I + R 
    dSdt = -beta/N*S*I
    dIdt = beta/N*S*I - alpha*I
    dRdt = alpha*I
    return [dSdt, dIdt, dRdt]
    
def ode_solver(t, initial_conditions, params):
    initI, initS, initR, initN = initial_conditions
    alpha, beta = params['beta'].value, params['alpha'].value
    initS = initN - (initI + initR)
    res = odeint(ode_model, [initS, initI, initR], t, args=(beta, alpha))
    return res
    
initN = 7000000
initS = 5
initI = 2
initR = 0
R0 = 0
alpha = 0.0000000001
beta = R0*alpha
days = 420

params = Parameters()
params.add('beta', value=alpha, min=0, max=10)
params.add('alpha', value=beta, min=0, max=10)

def error(params, initial_conditions, tspan, data):
    sol = ode_solver(tspan, initial_conditions, params)
    return (sol[:, 2:5] - data).ravel()
    
initial_conditions = [initS, initI, initR, initN]
alpha = 0.0000000005
beta = 0.0005
params['alpha'].value = alpha
params['beta'].value = beta
days = 420
tspan = np.arange(0, days,1)
data = WA_Cov1.loc[0:(days-1), ['Number of Infected People', 'Number of deaths']].values

data.shape

params

# fit model and find predicted values
result = minimize(error, params, args=(initial_conditions, tspan, data), method='leastsq')
# result = minimize(error, params, args=(initial_conditions, tspan, data), method='leastsq', \
{'xtol':1.e-15, 'ftol':1.e-15}

# display fitted statistics
report_fit(result)

# Fitted model of Infected people
final = data + result.residual.reshape(data.shape)

fig = go.Figure()
fig.add_trace(go.Scatter(x=tspan, y=data[:, 0], name='Observed Infections'))
fig.add_trace(go.Scatter(x=tspan, y=final[:, 0], name='Fitted Infections'))
fig.update_layout(title='SIR: Observed vs Fitted of Infected People',
                       xaxis_title='Number of days',
                       yaxis_title='Infected People',
                       title_x=0.5,
                      width=1000, height=600
                     )

# Fitted model of Removed people

final = data + result.residual.reshape(data.shape)

fig = go.Figure()
fig.add_trace(go.Scatter(x=tspan, y=data[:, 1], name='Observed Dead People'))
fig.add_trace(go.Scatter(x=tspan, y=final[:, 1],name='Fitted Dead People'))
fig.update_layout(title='SIR: Observed vs Fitted of Dead People',
                       xaxis_title='Number of days',
                       yaxis_title='Dead People',
                       title_x=0.5,
                      width=1000, height=600
                     )

# CUBIC SPLINES

from scipy.interpolate import CubicSpline, interp1d
plt.rcParams['figure.figsize'] =(12,8)

# apply cubic spline interpolation to the infected people
cs = CubicSpline(WA_Cov1["Number of days"],WA_Cov1["Number of Infected People"] )  
  
# plot cubic spline interpolation
plt.plot(WA_Cov1["Number of days"],WA_Cov1["Number of Infected People"], 'o', label='Infected People',color='yellow')
plt.plot(WA_Cov1['Number of days'], WA_Cov1['Number of Infected People'], color='black', label='Infected People')
plt.ylim(0, 400000)
plt.legend(loc='upper right', ncol=2)
plt.title('Cubic Spline Interpolation for the Infected People with COVID-19 in WA')
plt.show()
plt.savefig("CS1.png")

# apply cubic spline interpolation to the removed people
cs = CubicSpline(WA_Cov1["Number of days"],WA_Cov1["Number of deaths"] )  
  
# plot cubic spline interpolation
plt.plot(WA_Cov1["Number of days"],WA_Cov1["Number of deaths"], 'o', label='Removed People')
plt.plot(WA_Cov1['Number of days'], WA_Cov1['Number of deaths'], color='black', label='Removed People')
plt.ylim(0, 4000)
plt.legend(loc='upper right', ncol=2)
plt.title('Cubic Spline Interpolation for the Removed People with COVID-19 in WA')
plt.show()
plt.savefig("CP2.png")


